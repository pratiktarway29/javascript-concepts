Cross-Origin Resource Sharing (CORS) is a security feature implemented in web browsers to control and regulate requests made from one domain (origin) to another domain. It is a crucial part of web security that helps prevent potentially harmful cross-site request forgery (CSRF) and cross-site scripting (XSS) attacks.

Here's an explanation of CORS rules in JavaScript:

1. **Same-Origin Policy**: By default, web browsers enforce the same-origin policy, which means web pages can only make requests to the same domain from which the page originated. For example, a web page served from `https://example.com` can make requests to resources on `https://example.com`, but not to resources on `https://anotherdomain.com`.

2. **Cross-Origin Requests**: CORS allows controlled exceptions to the same-origin policy. It permits web pages to make requests to domains other than their own under specific conditions.

3. **HTTP Headers**: CORS rules are defined using HTTP headers. When a web page makes a cross-origin request (e.g., via JavaScript's XMLHttpRequest or the Fetch API), the browser sends an HTTP request with an `Origin` header, indicating the origin of the requesting page.

4. **Server-Side Configuration**: The server hosting the requested resource needs to respond with specific HTTP headers to allow or deny the request. These headers include:

   - **`Access-Control-Allow-Origin`**: This header specifies which origins are permitted to access the resource. It can contain a single origin (e.g., `https://example.com`) or a wildcard `*` to allow any origin. However, using a wildcard is generally discouraged for security reasons.

   - **`Access-Control-Allow-Methods`**: This header specifies which HTTP methods (e.g., GET, POST, PUT, DELETE) are allowed when making cross-origin requests.

   - **`Access-Control-Allow-Headers`**: This header specifies which headers can be included in the actual request. It's used for custom headers beyond the standard ones.

   - **`Access-Control-Allow-Credentials`**: If this header is present and set to `true`, it indicates that the requesting page can include credentials (like cookies or HTTP authentication) in the request.

   - **`Access-Control-Expose-Headers`**: This header lists which response headers should be exposed to the requesting page.

   - **`Access-Control-Max-Age`**: This header specifies how long the results of a preflight request (an initial request sent to check if the actual request is safe to send) can be cached, in seconds.

5. **Preflight Requests**: For certain types of cross-origin requests (e.g., those that use HTTP methods other than GET or POST, or include custom headers), the browser sends a preflight request (an HTTP OPTIONS request) to check if the actual request is safe to send. The server should respond to this preflight request with the appropriate CORS headers.

6. **Handling CORS Errors**: If the server's CORS headers are not set correctly or if the request is not allowed by the server, the browser will block the request, and JavaScript code on the page will receive an error. Developers can handle these errors in their JavaScript code to provide a graceful fallback or inform the user.

In summary, CORS rules in JavaScript govern how web pages can make requests to domains other than their own by defining and enforcing access controls on the server-side through specific HTTP headers. This security mechanism helps protect web applications from unauthorized cross-origin requests while allowing controlled exceptions for legitimate use cases.