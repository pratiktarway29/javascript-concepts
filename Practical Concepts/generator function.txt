In JavaScript, a generator function is a special type of function that allows you to control the flow of execution by yielding values one at a time. Generator functions are defined using the `function*` syntax, which includes an asterisk `*` immediately after the `function` keyword.

Here's how you define a generator function:

```javascript
function* myGenerator() {
  yield 1;
  yield 2;
  yield 3;
}
```

In this example, we've created a generator function called `myGenerator` that yields the values 1, 2, and 3 one after the other. The `yield` keyword is used within the generator function to produce values. When a value is yielded, the function's execution is paused, and that value is returned to the code that invoked the generator. The generator function's state is saved, allowing it to resume execution from where it left off the next time it's called.

Here's how you can use a generator function:

```javascript
const generator = myGenerator();

console.log(generator.next()); // { value: 1, done: false }
console.log(generator.next()); // { value: 2, done: false }
console.log(generator.next()); // { value: 3, done: false }
console.log(generator.next()); // { value: undefined, done: true }
```

In this code:

- We create an instance of the generator by calling `myGenerator()`, and it returns a generator object.
- We can call the `next()` method on the generator object to execute the generator function step by step.
- The `next()` method returns an object with two properties:
  - `value`: This is the value yielded by the generator at the current step.
  - `done`: This is a boolean that indicates whether the generator has finished executing (`true` when it's done).

You can use loops to iterate through all the values produced by a generator without manually calling `next()`:

```javascript
for (const value of myGenerator()) {
  console.log(value);
}
```

Generator functions are particularly useful for dealing with asynchronous operations, iterating through large datasets lazily, and implementing custom iteration logic. They provide a powerful tool for managing the flow of execution in a more flexible way compared to regular functions.