Imperative and declarative are two programming paradigms that describe different approaches to solving problems in software development. These paradigms can be applied to various programming languages, including JavaScript.

1. **Imperative Programming**:

   - **Focus**: Imperative programming is characterized by focusing on "how" to achieve a task. In other words, it involves giving step-by-step instructions to the computer on how to perform a particular task.
   
   - **State Management**: In imperative code, you often need to explicitly manage and modify the program's state. This means you may need to create variables, use loops, and write conditional statements to control the flow of your program and change variables' values as needed.

   - **Example in JavaScript**:
     ```javascript
     let numbers = [1, 2, 3, 4, 5];
     let squaredNumbers = [];
     
     for (let i = 0; i < numbers.length; i++) {
       squaredNumbers.push(numbers[i] * numbers[i]);
     }
     console.log(squaredNumbers); // [1, 4, 9, 16, 25]
     ```

   - **Mutable Data**: Imperative code often involves modifying data in place, which can make it harder to reason about the program's behavior and lead to unintended side effects.

2. **Declarative Programming**:

   - **Focus**: Declarative programming, on the other hand, emphasizes "what" you want to achieve rather than the step-by-step process of how to achieve it. You declare the desired outcome, and the programming language or framework handles the implementation details.
   
   - **State Management**: Declarative code abstracts away the state management, making it less explicit. It allows you to define the desired state or behavior, and the underlying system figures out how to achieve it.

   - **Example in JavaScript** (using the `map` function):
     ```javascript
     let numbers = [1, 2, 3, 4, 5];
     let squaredNumbers = numbers.map((number) => number * number);
     console.log(squaredNumbers); // [1, 4, 9, 16, 25]
     ```

   - **Immutable Data**: Declarative code often encourages immutability, meaning that data is not modified in place. Instead, new data structures are created when changes are needed, which can help prevent unintended side effects.
