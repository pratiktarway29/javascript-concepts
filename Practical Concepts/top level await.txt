Top-level `await` is a feature introduced in ECMAScript 2021 (ES12) that allows you to use the `await` keyword at the top level of your JavaScript module or script, outside of any asynchronous function. This feature simplifies the use of asynchronous code at the module level, making it more convenient to work with asynchronous operations in your code. Before top-level `await`, you could only use `await` inside async functions.

Here's an explanation of top-level `await` with examples:

### Example 1: Using Top-Level `await` in a Module

```javascript
// mymodule.js
export async function fetchData() {
  const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
  const data = await response.json();
  return data;
}

// main.js
import { fetchData } from './mymodule.js';

const result = await fetchData();
console.log(result);
```

In this example, `fetchData` is an asynchronous function defined in the module `mymodule.js`. In the `main.js` module, you can use top-level `await` to directly `await` the result of `fetchData`, even though `main.js` is not an async function itself. This makes the code more concise and readable.

### Example 2: Using Top-Level `await` in a Node.js Script

```javascript
// node-script.js
import fs from 'fs/promises';

const fileContents = await fs.readFile('example.txt', 'utf-8');
console.log(fileContents);
```

In a Node.js script, you can also use top-level `await` to simplify reading a file using `fs/promises`, which returns promises for file operations.

### Example 3: Using Top-Level `await` in a Browser Script

```html
<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Top-Level Await Example</title>
</head>
<body>
  <script type="module">
    import { fetchData } from './mymodule.js';

    (async () => {
      const result = await fetchData();
      console.log(result);
    })();
  </script>
</body>
</html>
```

In a browser script, you can use top-level `await` by including the `type="module"` attribute in the script tag. This allows you to directly use `await` without wrapping your code in an async function.

Keep in mind that not all environments support top-level `await` yet, and it may require specific configurations or flags. Also, remember to use top-level `await` judiciously, as it can block the main thread, potentially causing performance issues in web applications. It's typically more suitable for script-like modules and less appropriate for larger applications.