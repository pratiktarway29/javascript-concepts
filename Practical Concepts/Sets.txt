In JavaScript, a set is a built-in data structure that represents a collection of unique values. Sets are similar to arrays in that they can store multiple values, but unlike arrays, sets do not allow duplicate values. This means that every value in a set must be unique. Sets are primarily used for storing and managing distinct values or for performing operations that require uniqueness, such as removing duplicates from an array.

Here's how you can work with sets in JavaScript:

1. **Creating a Set:**
   You can create a new set using the `Set` constructor. For example:

   ```javascript
   const mySet = new Set();
   ```

2. **Adding Values:**
   You can add values to a set using the `add` method:

   ```javascript
   mySet.add(1);
   mySet.add(2);
   mySet.add(3);
   ```

   Note that duplicate values will not be added:

   ```javascript
   mySet.add(1); // This won't add a duplicate value
   ```

3. **Checking for Existence:**
   You can check if a value exists in a set using the `has` method:

   ```javascript
   console.log(mySet.has(2)); // true
   console.log(mySet.has(4)); // false
   ```

4. **Removing Values:**
   To remove a value from a set, you can use the `delete` method:

   ```javascript
   mySet.delete(2); // Removes the value 2 from the set
   ```

5. **Iterating Through a Set:**
   You can iterate through the values in a set using various methods, such as `forEach`, `for...of` loop, or converting the set to an array:

   ```javascript
   mySet.forEach(value => {
     console.log(value);
   });

   for (const value of mySet) {
     console.log(value);
   }

   const setToArray = Array.from(mySet);
   ```

6. **Getting the Size:**
   You can find the number of unique values in a set using the `size` property:

   ```javascript
   console.log(mySet.size); // 2
   ```

7. **Clearing a Set:**
   To remove all values from a set, you can use the `clear` method:

   ```javascript
   mySet.clear();
   ```

Sets are useful when you need to maintain a collection of distinct values and perform operations like checking for uniqueness, removing duplicates, or finding intersections between sets. They are especially handy in scenarios where maintaining a unique list of items is essential.