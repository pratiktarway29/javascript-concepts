In JavaScript, the `super` keyword is used to call functions or access properties of a parent or superclass within a derived or child class. It is often used in the context of class inheritance when you have a subclass that extends a superclass (also known as a parent class), and you want to invoke a method or access a property defined in the superclass.

Here's how the `super` keyword is typically used in JavaScript:

1. Calling Superclass Constructors:
   You can use `super()` within the constructor of a subclass to call the constructor of the superclass. This is necessary to initialize the properties and behavior defined in the superclass.

   ```javascript
   class Animal {
     constructor(name) {
       this.name = name;
     }
   }

   class Dog extends Animal {
     constructor(name, breed) {
       super(name); // Call the constructor of the superclass
       this.breed = breed;
     }
   }
   ```

2. Accessing Superclass Methods:
   You can use `super.methodName()` to call a method from the superclass with the same name when overriding a method in the subclass. This allows you to extend or modify the behavior of the superclass method while still using the original functionality.

   ```javascript
   class Animal {
     speak() {
       console.log("Animal makes a sound");
     }
   }

   class Dog extends Animal {
     speak() {
       super.speak(); // Call the speak method of the superclass
       console.log("Dog barks");
     }
   }
   ```

3. Accessing Superclass Properties:
   You can also use `super.propertyName` to access properties defined in the superclass from the subclass. This is useful when you want to reference or override the value of a property from the superclass.

   ```javascript
   class Animal {
     constructor(name) {
       this.name = name;
     }
   }

   class Dog extends Animal {
     constructor(name, breed) {
       super(name);
       this.breed = breed;
     }

     getDetails() {
       return `${super.name} is a ${this.breed}`;
     }
   }
   ```

The `super` keyword helps maintain the hierarchy and inheritance chain in object-oriented programming, allowing you to reuse and extend functionality from parent classes in a clean and organized manner. It ensures that you can access and invoke the appropriate methods and properties defined in the superclass when needed within the subclass.