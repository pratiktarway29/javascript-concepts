In JavaScript, a function is a reusable block of code that performs a specific task or set of tasks. Functions are a fundamental concept in JavaScript and are used to organize and structure your code, make it more modular, and promote code reuse. Here's an explanation of how functions work in JavaScript:

1. **Function Declaration:**
   You can declare a function using the `function` keyword, followed by a name for the function, a list of parameters (if any), and the code block enclosed in curly braces. For example:

   ```javascript
   function greet(name) {
     console.log(`Hello, ${name}!`);
   }
   ```

2. **Function Parameters:**
   Functions can accept zero or more parameters, which act as input values for the function. These parameters are like placeholders that allow you to pass data into the function when you call it. In the example above, `name` is a parameter.

3. **Function Body:**
   The code block enclosed within the curly braces `{}` is the function's body. It contains the code that gets executed when the function is called. In the example above, the `console.log` statement is part of the function's body.

4. **Function Invocation:**
   To execute a function, you need to call it by its name, followed by parentheses `()`. If the function expects parameters, you pass them as arguments inside the parentheses. For example:

   ```javascript
   greet("Alice"); // This calls the greet function with the argument "Alice".
   ```

   When the function is called, it will execute its code with the provided arguments. In this case, it will print "Hello, Alice!" to the console.

5. **Return Statement:**
   Functions can also return values using the `return` statement. A return statement ends the function's execution and returns a value to the caller. For example:

   ```javascript
   function add(a, b) {
     return a + b;
   }

   const result = add(3, 5);
   console.log(result); // This will print 8 to the console.
   ```

   In this example, the `add` function returns the sum of `a` and `b`.

6. **Function Expression:**
   Functions can also be defined using function expressions, which involve assigning an anonymous function to a variable. For example:

   ```javascript
   const multiply = function(a, b) {
     return a * b;
   };

   const product = multiply(4, 6);
   console.log(product); // This will print 24 to the console.
   ```

7. **Arrow Functions (ES6):**
   Arrow functions provide a more concise syntax for defining functions, especially for simple functions. For example:

   ```javascript
   const square = (x) => x * x;

   const squaredValue = square(5);
   console.log(squaredValue); // This will print 25 to the console.
   ```

Functions are a crucial part of JavaScript's flexibility and power, allowing you to encapsulate logic, reuse code, and create modular, maintainable programs. They are used extensively in JavaScript for tasks ranging from simple calculations to complex event handling and asynchronous operations.